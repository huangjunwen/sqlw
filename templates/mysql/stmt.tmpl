package {{ .PackageName }}

import (
  "fmt"
  "context"
  "text/template"
  "database/sql"

  "github.com/jmoiron/sqlx"
  null "gopkg.in/volatiletech/null.v6"
)

var (
  // Suppress "imported and not used" errors.
  _ = fmt.Printf
  _ = context.Background
  _ = template.IsTrue
  _ = sql.Open
  _ = sqlx.Named
  _ = null.NewBool
)

{{ range $stmt := .Stmts }}

  {{ $stmtName := $stmt.StmtName }}
  {{ $stmtType := $stmt.StmtType }}
  {{ $args := ExtractArgsInfo $stmt }}
  {{ $vars := ExtractVarsInfo $stmt }}
  {{ $wildcards := ExtractWildcardsInfo $stmt }}
  {{ $useTemplate := $vars.Has "use_template" }}
  {{ $inQuery := $vars.Has "in_query" }}

var (
{{ if $useTemplate -}}
  stmtTmpl{{ $stmtName }} = template.Must(template.New("{{ $stmtName }}").Parse({{ Literal $stmt.Text }}))
{{ else -}}
  stmt{{ $stmtName }} = {{ Literal $stmt.Text }} 
{{ end -}}
)

func build{{ $stmtName }}Query(data map[string]interface{}) (string, []interface{}, error) {
{{ if $useTemplate }}
  // Template -> named query
  namedQuery := newWriterStringer()
  if err := stmtTmpl{{ $stmtName }}.Execute(namedQuery, data); err != nil {
    return "", nil, err
  }
  namedQueryString := namedQuery.String()
{{ else }}
  // Named query.
  namedQueryString := stmt{{ $stmtName }}
{{ end }}

  // Named query -> query
  query, args, err := sqlx.Named(namedQueryString, data)
  if err != nil {
    return "", nil, err
  }

{{ if $inQuery }}
  // Expand "in" args.
  query, args, err = sqlx.In(query, args)
  if err != nil {
    return "", nil, err
  }
{{ end }}

  return query, args, nil
}

  {{ if eq $stmtType "SELECT" }}

    {{ $return := $vars.Value "return" }}

// {{ $stmtName }}Result is the result of {{ $stmtName }}.
type {{ $stmtName }}Result struct {
    {{ range $i, $resultCol := $stmt.ResultCols -}}

      {{ $wildcardColumn := $wildcards.WildcardColumn $i -}}

      {{ if $wildcardColumn.Valid -}}
        {{ if eq $wildcardColumn.Pos 0 -}}
  {{ UpperCamel $wildcardColumn.Table.TableName }} {{ UpperCamel $wildcardColumn.Table.TableName }}
        {{ end -}}
      {{ else -}}
  {{ UpperCamel $resultCol.Name }} {{ ScanType $resultCol }}
      {{ end -}}

    {{ end -}}
}

func (r *{{ $stmtName }}Result) scanFrom(rows *sql.Rows) error {
  return rows.Scan(
{{ range $i, $resultCol := $stmt.ResultCols -}}
  {{ $wildcardColumn := $wildcards.WildcardColumn $i -}}
  {{ if $wildcardColumn.Valid -}}
  &r.{{ UpperCamel $wildcardColumn.Table.TableName }}.{{ UpperCamel $wildcardColumn.ColumnName }},
  {{ else -}}
  &r.{{ UpperCamel $resultCol.Name }},
  {{ end -}}
{{ end -}}
  )
}

// {{ $stmtName }} ...
func {{ $stmtName }}(ctx context.Context, q Queryer
{{- range $arg := $args.Args -}}
, {{ $arg.ArgName }} {{ $arg.ArgType }}
{{- end -}}
) ({{ if or (eq $return "one") (eq $return "first") }}*{{ else }}[]*{{ end }}{{ $stmtName }}Result, error) {
  // NOTE: Add a nested block to allow identifier shadowing.
  {

  // Build query
  query, args, err := build{{ $stmtName }}Query(map[string]interface{}{
{{ range $arg := $args.Args -}}
    "{{ $arg.ArgName }}": {{ $arg.ArgName }},
{{- end }}
  })
  if err != nil {
    return nil, err
  }

  // Query
  rows, err := q.QueryContext(ctx, query, args...)
  if err != nil {
    return nil, err
  }
  defer rows.Close()

{{ if eq $return "first" }}
  // Return first row
  if !rows.Next() {
    return nil, nil
  }
  result := &{{ $stmtName }}Result{}
  if err := result.scanFrom(rows); err != nil {
    return nil, err
  }
  return result, rows.Err()
{{ else if eq $return "one" }}
  // Return one row
  if !rows.Next() {
    return nil, nil
  }
  result := &{{ $stmtName }}Result{}
  if err := result.scanFrom(rows); err != nil {
    return nil, err
  }
  if rows.Next() {
    return nil, fmt.Errorf("{{ $stmtName }} returns more than one row")
  }
  return result, rows.Err()
{{ else }}
  // Return rows
  results := []*{{ $stmtName }}Result{}
  for rows.Next() {
    result := &{{ $stmtName }}Result{}
    if err := result.scanFrom(rows); err != nil {
      return nil, err
    }
    results = append(results, result)
  }
  return results, rows.Err()
{{ end }}
  }
}

  {{ else }}

// {{ $stmtName }} ...
func {{ $stmtName }}(ctx context.Context, e Execer
{{- range $arg := $args.Args -}}
, {{ $arg.ArgName }} {{ $arg.ArgType }}
{{- end -}}
) (rowsAffected int64, err error) {
  // NOTE: Add a nested block to allow identifier shadowing.
  {

  // Build query
  query, args, err := build{{ $stmtName }}Query(map[string]interface{}{
{{ range $arg := $args.Args -}}
    "{{ $arg.ArgName }}": {{ $arg.ArgName }},
{{- end }}
  })
  if err != nil {
    return 0, err
  }

  // Exec
  result, err := e.ExecContext(ctx, query, args...)
  if err != nil {
    return 0, err
  }

  rowsAffected, err := result.RowsAffected()
  if err != nil {
    return 0, err
  }
  
  return rowsAffected, nil

  }
}

  {{ end }}

{{ end }}
