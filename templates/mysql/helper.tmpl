package {{ .PackageName }}

import (
  "fmt"
  "database/sql/driver"
)

func isNull(val driver.Valuer) bool {
  v, err := val.Value()
  if err != nil {
    panic(err)
  }
  return v == nil
}

func buildInsert(entry TableEntry) (string, []interface{}) {

  info := entry.TableInfo()
  cols := []byte{}
  phs := []byte{}
  args := []interface{}{}

  for i:=0; i<info.NumColumn(); i++ {
    val := entry.ColumnValuer(i)
    if isNull(val) {
      continue
    }
    if len(args) != 0 {
      cols = append(cols, ", "...)
      phs = append(phs, ", "...)
    }
    cols = append(cols, '`')
    cols = append(cols, info.ColumnName(i)...)
    cols = append(cols, '`')
    phs = append(phs, '?')
    args = append(args, val)
  }

  return fmt.Sprintf("INSERT INTO `%s` (%s) VALUES (%s)", info.TableName(), cols, phs), args

}

func buildUpdate(entry, newEntry TableEntry) (string, []interface{}, error) {

  info := entry.TableInfo()
  if info != newEntry.TableInfo() {
    panic(fmt.Errorf("Update with two different tables' entries"))
  }

  assignmentList := []byte{} // "col1=?, col2=?, ..."
  assignmentArgs := []interface{}{}
  primaryList := []byte{} // "id1=? AND id2=? AND ..."
  primaryArgs := []interface{}{}

  for i:=0; i<info.NumColumn(); i++ {
    
    columnName := info.ColumnName(i)
    val := entry.ColumnValuer(i)
    newVal := entry.ColumnValuer(i)

    // --- Normal column ---
    if !info.IsPrimaryColumn(i) {
      if val == newVal {
        // Skip.
        continue
      }

      if len(assignmentList) != 0 {
        assignmentList = append(assignmentList, ", "...)
      }
      assignmentList = append(assignmentList, '`')
      assignmentList = append(assignmentList, columnName...)
      assignmentList = append(assignmentList, "`=?"...)
      assignmentArgs = append(assignmentArgs, newVal)
      continue
    }

    // --- Primary column ---
    // Both entries should have the same primary key.
    if val != newVal {
      return "", nil, fmt.Errorf("Update: new entry have a different primary key")
    }

    // Every column in primary key must have not-null value. 
    if isNull(val) {
      return "", nil, fmt.Errorf("Update: invalid entries (primary key is NULL)")
    }

    // Add " id1=? AND ..." in where clause.
    if len(primaryList) != 0 {
      primaryList = append(primaryList, " AND "...)
    }
    primaryList = append(primaryList, '`')
    primaryList = append(primaryList, columnName...)
    primaryList = append(primaryList, "`=?"...)
    primaryArgs = append(primaryArgs, val)

    // Add " id1=id1, ..." in assignment list as a no-op.
    if len(assignmentList) != 0 {
      assignmentList = append(assignmentList, ", "...)
    }
    assignmentList = append(assignmentList, '`')
    assignmentList = append(assignmentList, columnName...)
    assignmentList = append(assignmentList, "`="...)
    assignmentList = append(assignmentList, columnName...)

  }

  return fmt.Sprintf("UPDATE `%s` SET %s WHERE %s", info.TableName(), assignmentList, primaryList), append(assignmentArgs, primaryArgs...), nil

}
