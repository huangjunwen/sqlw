package {{ .PackageName }}

import (
  "context"
  "database/sql/driver"
  "fmt"

  null "gopkg.in/volatiletech/null.v6"
  "gopkg.in/volatiletech/null.v6/convert"
)

var (
  // Suppress "imported and not used" error
  _ = context.Background
  _ = driver.IsValue
  _ = fmt.Printf
  _ = null.NewBool
  _ = convert.ConvertAssign
)

{{ $tableName := .Table.TableName }}
{{ $lowerTableName := LowerCamel .Table.TableName }}
{{ $upperTableName := UpperCamel .Table.TableName }}
{{ $primary := .Table.Primary }}

// {{ $upperTableName }} represents a row entry of table "{{ $tableName }}".
type {{ $upperTableName }} struct {
	{{ range $column := .Table.Columns -}}
  {{ $col := $column.Col -}}
  {{ UpperCamel $column.ColumnName }} {{ ScanType $column }} `json:"{{ $column.ColumnName }}" db:"{{ $column.ColumnName }}"` // {{ if $col.HasNullable }}{{ if not $col.Nullable }}NOT{{ else }}   {{ end }} NULL{{ end }}
	{{ end }}
}

var (
  {{ $lowerTableName }}TableInfo = &TableInfo{
    tableName: "{{ $tableName }}",
    columnNames: []string{
    {{- range $column := .Table.Columns -}}
      "{{ $column.ColumnName }}",
    {{- end -}}
    },
    primaryColumnsPos: []int{
    {{- if $primary.Valid -}}
    {{- range $column := $primary.Columns -}}
      {{ $column.Pos }},
    {{- end -}}
    {{- end -}}
    },
    autoIncColumnPos: {{ if .Table.AutoIncColumn.Valid }}{{ .Table.AutoIncColumn.Pos }}{{ else }}-1{{ end }},
  }
)

// TableInfo returns table meta information.
func ({{ $lowerTableName }} *{{ $upperTableName }}) TableInfo() *TableInfo {
  return {{ $lowerTableName }}TableInfo
}

// ColumnValue returns the i-th column's value.
func ({{ $lowerTableName }} *{{ $upperTableName }}) ColumnValue(i int) driver.Valuer {
  switch i {
  {{ range $column := .Table.Columns -}}
  case {{ $column.Pos }}: return {{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}
  {{ end -}}
  default:
    panic(fmt.Errorf("Bad column pos %d for table {{ $tableName }}", i))
  }
}

// Copy a row entry.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Copy() *{{ $upperTableName }} {
  ret := &{{ $upperTableName }}{}
  *ret = *{{ $lowerTableName }}
  return ret
}

// Insert all non-null values into table "{{ $tableName }}".
func ({{ $lowerTableName }} *{{ $upperTableName }}) Insert(ctx context.Context, e Execer) error {
  query, args := buildInsert({{ $lowerTableName }})
  r, err := e.ExecContext(ctx, query, args...)
  _ = r
  if err != nil {
    return err
  }

  {{ $autoIncColumn := .Table.AutoIncColumn }}
  {{ if $autoIncColumn.Valid }}
  {{ $upperAutoIncColumnName := UpperCamel $autoIncColumn.ColumnName }}
  if {{ $lowerTableName }}.{{ $upperAutoIncColumnName }}.Ptr() == nil {
    lastInsertId, err := r.LastInsertId()
    if err != nil {
      return err
    }
    if err := convert.ConvertAssign(&{{ $lowerTableName }}.{{ $upperAutoIncColumnName }}, lastInsertId); err != nil {
      return err
    }
  }
  {{ end }}

  return nil
}

{{ if $primary.Valid }}

// Update columns that have different values. Return true if the row is successfully updated.
// In this case values in `{{ $lowerTableName }}` will be updated to `new{{ $upperTableName }}` as well.
//
// Update returns false if there is an error occured or no matched row updated.
// 
// NOTE: `{{ $lowerTableName }}` and `new{{ $upperTableName }}` must have same not-null primary key, otherwise an error will be returned.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Update(ctx context.Context, e Execer, new{{ $upperTableName }} *{{ $upperTableName }}) (updated bool, err error) {
  query, args, err := buildUpdate({{ $lowerTableName }}, new{{ $upperTableName }})
  if err != nil {
    return false, err
  }

  r, err := e.ExecContext(ctx, query, args...)
  if err != nil {
    return false, err
  }

  rowsAffected, err := r.RowsAffected()
  if err != nil {
    return false, err
  }

  // No match row updated.
  if rowsAffected <= 0 {
    return false, nil
  }

  // Copy new value.
  *{{ $lowerTableName }} = *new{{ $upperTableName }}
  return true, nil
}

{{ end }}
