package {{ .PackageName }}

import (
  "context"
  "database/sql"
  "database/sql/driver"
  "fmt"

  null "gopkg.in/volatiletech/null.v6"
  "gopkg.in/volatiletech/null.v6/convert"
)

var (
  // Suppress "imported and not used" error
  _ = context.Background
  _ = driver.IsValue
  _ = fmt.Printf
  _ = null.NewBool
  _ = convert.ConvertAssign
)

{{ $tableName := .Table.TableName }}
{{ $lowerTableName := LowerCamel .Table.TableName }}
{{ $upperTableName := UpperCamel .Table.TableName }}
{{ $primary := .Table.Primary }}

// {{ $upperTableName }} represents a row entry of table "{{ $tableName }}".
type {{ $upperTableName }} struct {
	{{ range $column := .Table.Columns -}}
  {{ $col := $column.Col -}}
  {{ UpperCamel $column.ColumnName }} {{ ScanType $column }} `json:"{{ $column.ColumnName }}" db:"{{ $column.ColumnName }}"` // {{ if $col.HasNullable }}{{ if not $col.Nullable }}NOT{{ else }}   {{ end }} NULL{{ end }}
	{{ end }}
}

var (
  {{ $lowerTableName }}TableInfo = &TableInfo{
    tableName: "{{ $tableName }}",
    columnNames: []string{
    {{- range $column := .Table.Columns -}}
      "{{ $column.ColumnName }}",
    {{- end -}}
    },
    primaryColumnsPos: []int{
    {{- if $primary.Valid -}}
    {{- range $column := $primary.Columns -}}
      {{ $column.Pos }},
    {{- end -}}
    {{- end -}}
    },
    autoIncColumnPos: {{ if .Table.AutoIncColumn.Valid }}{{ .Table.AutoIncColumn.Pos }}{{ else }}-1{{ end }},
  }
)

// TableInfo returns table meta information.
func ({{ $lowerTableName }} *{{ $upperTableName }}) TableInfo() *TableInfo {
  return {{ $lowerTableName }}TableInfo
}

// ColumnValuer returns the i-th column as a Valuer.
func ({{ $lowerTableName }} *{{ $upperTableName }}) ColumnValuer(i int) driver.Valuer {
  switch i {
  {{ range $column := .Table.Columns -}}
  case {{ $column.Pos }}: return {{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}
  {{ end -}}
  default:
    panic(fmt.Errorf("Bad column pos %d for table {{ $tableName }}", i))
  }
}

// ColumnValuer returns the i-th column as a Scanner.
func ({{ $lowerTableName }} *{{ $upperTableName }}) ColumnScanner(i int) sql.Scanner {
  switch i {
  {{ range $column := .Table.Columns -}}
  case {{ $column.Pos }}: return &{{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}
  {{ end -}}
  default:
    panic(fmt.Errorf("Bad column pos %d for table {{ $tableName }}", i))
  }
}

// Copy a row entry.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Copy() *{{ $upperTableName }} {
  ret := &{{ $upperTableName }}{}
  *ret = *{{ $lowerTableName }}
  return ret
}

// Insert all not-null values into table "{{ $tableName }}".
func ({{ $lowerTableName }} *{{ $upperTableName }}) Insert(ctx context.Context, e Execer) error {
  query, args := buildInsert({{ $lowerTableName }})
  r, err := e.ExecContext(ctx, query, args...)
  _ = r
  if err != nil {
    return err
  }

  {{ $autoIncColumn := .Table.AutoIncColumn }}
  {{ if $autoIncColumn.Valid }}
  {{ $upperAutoIncColumnName := UpperCamel $autoIncColumn.ColumnName }}
  if {{ $lowerTableName }}.{{ $upperAutoIncColumnName }}.Ptr() == nil {
    lastInsertId, err := r.LastInsertId()
    if err != nil {
      return err
    }
    if err := convert.ConvertAssign(&{{ $lowerTableName }}.{{ $upperAutoIncColumnName }}, lastInsertId); err != nil {
      return err
    }
  }
  {{ end }}

  return nil
}

{{ if $primary.Valid }}

// Update the entry. Only columns that have different values will be updated. Primary key column(s) must have equal not-null value(s) for both entries, otherwise an error will be returned. 
//
// It returns true if the row is successfully updated. In this case values in `{{ $lowerTableName }}` will be updated to `new{{ $upperTableName }}` as well.
//
// It returns false if there is an error occured or no matched row.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Update(ctx context.Context, e Execer, new{{ $upperTableName }} *{{ $upperTableName }}) (updated bool, err error) {
  query, args, err := buildUpdate({{ $lowerTableName }}, new{{ $upperTableName }})
  if err != nil {
    return false, err
  }

  // Execute.
  r, err := e.ExecContext(ctx, query, args...)
  if err != nil {
    return false, err
  }

  rowsAffected, err := r.RowsAffected()
  if err != nil {
    return false, err
  }

  // No match row updated.
  if rowsAffected <= 0 {
    return false, nil
  }

  // Copy new value.
  *{{ $lowerTableName }} = *new{{ $upperTableName }}
  return true, nil
}

// Delete the entry. Primary key column(s) must have not-null value(s), otherwise an error will be returned.
//
// It returns true if the entry is successfully deleted.
//
// It returns false if there is an error occured or no matched row.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Delete(ctx context.Context, e Execer) (deleted bool, err error) {
  // Check primary key column(s).
  {{- range $column := $primary.Columns }}
  if isNull({{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}) {
    return false, fmt.Errorf("Primary column `{{ $column.ColumnName }}` of `{{ $tableName  }}`is null")
  }
  {{- end }}

  // Execute.
  r, err := e.ExecContext(ctx, "DELETE FROM `{{ $tableName }}` WHERE {{ range $i, $column := $primary.Columns }}{{ if ne $i 0 }} AND {{ end }}`{{ $column.ColumnName }}`=?{{ end }}"{{ range $column := $primary.Columns }}, {{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}{{ end }} )
  if err != nil {
    return false, err
  }

  rowsAffected, err := r.RowsAffected()
  if err != nil {
    return false, err
  }

  // No match row deleted.
  if rowsAffected <= 0 {
    return false, nil
  }

  return true, nil
}


// Reload the entry. Primary key column(s) must have not-null value(s), otherwise an error will be returned.
//
// It returns true if the entry is successfully reloaded.
//
// It returns false if there is an error occured or no matched row.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Reload(ctx context.Context, q Queryer) (reloaded bool, err error) {
  // Check primary key column(s).
  {{- range $column := $primary.Columns }}
  if isNull({{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}) {
    return false, fmt.Errorf("Primary column `{{ $column.ColumnName }}` of `{{ $tableName  }}`is null")
  }
  {{- end }}

  // Query.
  row := q.QueryRowContext(ctx, "SELECT {{ range $i, $column := .Table.Columns }}{{ if ne $i 0 }}, {{ end }}`{{ $column.ColumnName }}`{{ end }} FROM `{{ $tableName }} WHERE {{ range $i, $column := $primary.Columns }}{{ if ne $i 0 }} AND {{ end }}`{{ $column.ColumnName }}`=?{{ end }}"{{ range $column := $primary.Columns }}, {{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}{{ end }})

  // Scan.
  err = row.Scan(
  {{ range $column := .Table.Columns -}}
    &{{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }},
  {{ end }}
  )

  // Check error.
  if err != nil {
    if err == sql.ErrNoRows {
      return false, nil
    }
    return false, err
  }

  return true, nil

}


{{ end }}
