package {{ .PackageName }}

import (
  "context"
  "database/sql"
  "database/sql/driver"
  "io"
  "fmt"
)

// Execer is the common interface to execute a query without returning any rows.
type Execer interface {
  ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)
}

// Queryer is the common interface to execute a query returning row(s).
type Queryer interface {
  QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)
  QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
}

// WriterStringer is combination of io.Writer and fmt.Stringer.
type WriterStringer interface {
  io.Writer
  fmt.Stringer
}

// TableEntry is the common interface of an entry of a table.
type TableEntry interface {
  // TableInfo returns table meta information.
  TableInfo() *TableInfo

  // ColumnValue returns the i-th column's value.
  ColumnValue(i int) driver.Valuer
}

// TableInfo contains meta information of a table.
type TableInfo struct {
  tableName string
  columnNames []string
  primaryColumnsPos []int
  autoIncColumnPos int // -1 if not exists
}

// TableName returns the table name.
func (info *TableInfo) TableName() string {
  return info.tableName
}

// NumColumn returns the number of columns of the table.
func (info *TableInfo) NumColumn() int {
  return len(info.columnNames)
}

// ColumnName returns the i-th column name of the table.
func (info *TableInfo) ColumnName(i int) string {
  return info.columnNames[i]
}

// PrimaryColumnNames returns list of column names of primary key.
func (info *TableInfo) PrimaryColumnNames() []string {
  ret := []string{}
  for _, i := range info.primaryColumnsPos {
    ret = append(ret, info.columnNames[i])
  }
  return ret
}

// IsPrimaryColumn returns true if the i-th column is part of the primary key.
func (info *TableInfo) IsPrimaryColumn(i int) bool {
  // Using loop is fast enough since the number of primary columns is usually less than 10
  for _, j := range info.primaryColumnsPos {
    if j == i {
      return true
    }
  }
  return false
}

// AutoIncColumnName returns the 'auto increment' column name if exists or "".
func (info *TableInfo) AutoIncColumnName() string {
  if info.autoIncColumnPos < 0 {
    return ""
  } 
  return info.columnNames[info.autoIncColumnPos]
}

// IsAutoIncColumn returns true if the i-th column is the 'auto increment' column.
func (info *TableInfo) IsAutoIncColumn(i int) bool {
  if info.autoIncColumnPos < 0 {
    return false
  }
  return i == info.autoIncColumnPos
}
