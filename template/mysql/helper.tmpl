package {{ .PackageName }}

import (
  "fmt"
  "strings"
  "database/sql/driver"
)

func isNull(val interface{}) bool {
  if val == nil {
    return true
  }
  switch v := val.(type) {
  case driver.Valuer:
    x, err := v.Value()
    if err != nil {
      panic(err)
    }
    return x == nil
  default:
    return false
  }
}

func buildInsert(entry TableEntry) (string, []interface{}) {
  info := entry.TableInfo()
  cols := []string{}
  phs := []string{}
  args := []interface{}{}

  for i:=0; i<info.NumColumn(); i++ {
    val := entry.ColumnValue(i)
    if isNull(val) {
      continue
    }
    cols = append(cols, info.ColumnName(i))
    phs = append(phs, "?")
    args = append(args, val)
  }

  return fmt.Sprintf("INSERT INTO %s (%s) VALUES (%s)", info.TableName(), strings.Join(cols, ", "), strings.Join(phs, ", ")), args

}

/*
func buildUpdate(entry, newEntry TableEntry) (string, []interface{}) {
  fragments := []string{
    "UPDATE ",
    entry.TableName(),
    " SET ",
  }
  vals := entry.ColumnValues()
  newVals := newEntry.ColumnValues()
  args := []interface{}{}
  
  for i, col := range entry.ColumnNames() {
    if vals[i] != newVals[i] {
      fragments = append(fragments, col)
      fragments = append(fragments, "=?")
    }
  }
}
*/
