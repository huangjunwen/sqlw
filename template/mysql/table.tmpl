package {{ .PackageName }}

import (
  "context"
  "fmt"

	"gopkg.in/guregu/null.v3"
)

{{ $tableName := .Table.TableName }}
{{ $lowerTableName := LowerCamel .Table.TableName }}
{{ $upperTableName := UpperCamel .Table.TableName }}
{{ $primary := .Table.Primary }}

type {{ $upperTableName }} struct {
	{{ range $column := .Table.Columns -}}
	{{ UpperCamel $column.ColumnName }} {{ ScanType $column.ColumnType }} `json:"{{ $column.ColumnName }}" db:"{{ $column.ColumnName }}"`
	{{ end }}
}

var (
  {{ $lowerTableName }}TableInfo = &TableInfo{
    tableName: "{{ $tableName }}",
    columnNames: []string{
    {{- range $column := .Table.Columns -}}
      "{{ $column.ColumnName }}",
    {{- end -}}
    },
    primaryColumnsPos: []int{
    {{- if .Table.Primary.Valid -}}
    {{- range $column := .Table.Primary.Columns -}}
      {{ $column.Pos }},
    {{- end -}}
    {{- end -}}
    },
    autoIncColumnPos: {{ if .Table.AutoIncColumn.Valid }}{{ .Table.AutoIncColumn.Pos }}{{ else }}-1{{ end }},
  }
)

// TableInfo() returns table meta information.
func ({{ $lowerTableName }} *{{ $upperTableName }}) TableInfo() *TableInfo {
  return {{ $lowerTableName }}TableInfo
}

// ColumnValue() returns the i-th column's value.
func ({{ $lowerTableName }} *{{ $upperTableName }}) ColumnValue(i int) interface{} {
  switch i {
  {{ range $column := .Table.Columns -}}
  case {{ $column.Pos }}: return {{ $lowerTableName }}.{{ UpperCamel $column.ColumnName }}
  {{ end -}}
  default:
    panic(fmt.Errorf("Bad column pos %d for table {{ $tableName }}", i))
  }
}

// Insert all non-null values into `{{ $tableName  }}` table.
func ({{ $lowerTableName }} *{{ $upperTableName }}) Insert(ctx context.Context, e Execer) error {
  query, args := buildInsert({{ $lowerTableName }})
  r, err := e.ExecContext(ctx, query, args...)
  _ = r
  if err != nil {
    return err
  }

  {{ $autoIncColumn := .Table.AutoIncColumn }}
  {{ if $autoIncColumn.Valid }}
  {{ $upperAutoIncColumnName := UpperCamel $autoIncColumn.ColumnName }}
  if {{ $lowerTableName }}.{{ $upperAutoIncColumnName }}.Ptr() == nil {
    lastInsertId, err := r.LastInsertId()
    if err != nil {
      return err
    }
    {{ $lowerTableName }}.{{ $upperAutoIncColumnName }}.SetValid(lastInsertId)
  }
  {{ end }}

  return nil
}

{{ if $primary.Valid }}

func ({{ $lowerTableName }} *{{ $upperTableName }}) Update(ctx context.Context, e Execer, new{{ $upperTableName }} *{{ $upperTableName }}) error {
  return nil
}

{{ end }}

